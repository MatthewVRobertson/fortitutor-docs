@startuml

package Anatomy {
    class MuscleGroup {
        MuscleGroup
        Name
        BodySegment
    }

    class Muscle {
        Name
        MuscleGroup
    }

    class BodySegment {
        BodySegment
        Name
    }
    
    BodySegment *--> MuscleGroup
    MuscleGroup *--> Muscle
}

package Fitness {
    class Exercise {
        Name
        + MusclesWorked List<ExerciseMuscleWorked>
        Equipment        
        ExerciseExecutionType
    }

    class ExerciseMuscleWorked {
        Muscle
        MuscleWorkedAmount
    }

    enum MuscleWorkedAmount {
        Primary
        Secondary
    }

    class Equipment {
        Name
        EquipmentType
    }

    enum ExerciseExecutionType {
        Bilateral,
        Unilateral
    }

    enum EquipmentType {
        Freeweight
        Machine
        Other
    }

    Exercise *--> ExerciseMuscleWorked
    Exercise o--> Equipment
    Exercise --> ExerciseExecutionType
    ExerciseMuscleWorked --> MuscleWorkedAmount
    Fitness.ExerciseMuscleWorked o------> Anatomy.Muscle
    Equipment --> EquipmentType
}



package Training {
    class TrainingProfile {
        Name
    }

    class MacroPeriodization
    {
        MacroPeriodizationId
        TrainingProfile
        StartDate
        EndDate
    }
    note top of MacroPeriodization
        Overall goal, months, season or year.
    end note

    class MesocyclePeriodization
    {
        MesocyclePeriodizationId
        MacroPeriodizationId
        Version
        IsCurrent
        CycleOrder        
        CycleLengthTimeUnit
        CycleLengthValue
        StartDate
        EndDate        
        EffectiveStartDate
        EffectiveEndDate
        IsDeload        
    }
    note top of MesocyclePeriodization
        Focused phases - weeks to months.
        Mesocycles allow changes during a macro cycle,
        this is why there are start and end dates.
        Deloads are also linked here.3
        The effective dates are used, if the meso cycle is changed after creation.
        The old dates are kept for history.
    end note

    class MicroCyclePeriodization
    {
        MicroCyclePeriodizationId
        MesocyclePeriodizationId
        CycleDayOrder
        IsRestDay
        Exercises List<MicroCyclePeriodizationExercise>
    }
    note top of MicroCyclePeriodization
        The day to day plan
    end note

    class MicroCyclePeriodizationExercise
    {        
        Exercise
        TargetReps
        TargetSets
        TargetWeight
    }
    
    class TrainingProfileWeightTracker {
        TrainingProfileId
        RecordDateUtc
        WeightInput decimal(19,4)
        IsInputMetric
        NormalizedWeightKg decimal(19,4)
    }

    class TrainingProfileRole {
        TrainingProfileId
        RoleId
        UserId
    }

    class WorkoutSessionLog {
        TrainingProfile
        Series List<WorkoutSeriesLog>
        + SessionStartDateUtc
    }

    class WorkoutSeriesLog {
        Exercise
        Sets List<WorkoutSetLog>
    }

    enum SetType {
        Warmup
        Working
    }

    class WorkoutSetLog {
        SetType
        Reps
        Weight
        WeightUnitType
        LateralityWorked
    }

    class OneRepMaxTracker {
        TrainingProfileId
        ExerciseId
        RecordDateUtc
        Weight
        Reps
        EstimatedOneRepMax
    }

    enum LateralityWorked {
        Left
        Right
        Bilateral
    }

    TrainingProfile *----> TrainingProfileRole
    TrainingProfile <--o TrainingProfileWeightTracker
    TrainingProfile <--o WorkoutSessionLog
    TrainingProfile <--o OneRepMaxTracker
    TrainingProfile <--o MacroPeriodization     

    MacroPeriodization *--> MesocyclePeriodization     
    MesocyclePeriodization *--> MicroCyclePeriodization
    MicroCyclePeriodization *--> MicroCyclePeriodizationExercise
    MicroCyclePeriodizationExercise o--> Fitness.Exercise
   
    WorkoutSessionLog *--> WorkoutSeriesLog
    WorkoutSeriesLog *--> WorkoutSetLog
    WorkoutSetLog --> LateralityWorked
    WorkoutSetLog --> SetType
    
}

WorkoutSetLog ---> Common.WeightUnitType
Training.WorkoutSeriesLog o--> Fitness.Exercise
TrainingProfileRole --> Auth.Role

package Venue {
    class Facility {
        VenuId
        Name  
        + Address Address      
        + VenueEquipment List<VenueEquipment>
    }

    class FacilityEquipment {
        Venu
        Equipment
        Quantity
    }
    
    Facility *---> FacilityEquipment
}

FacilityEquipment o---> Fitness.Equipment

Facility *-----> Common.Address

package Common {
    class Address {
        StreetNumber
        StreeName
        Unit
        PostalCode
        Country
        State
        City
    }

    class Locale {
        LocaleId
        LocaleCode
    }

    enum WeightUnitType {
        Kg
        Lb
    }
}


package Auth {
    class Role {
        RoleId
        Name
    }
}

note top of Auth
    This content in managed by Fortitutor Auth service
end note
@enduml